{
  "version": 3,
  "sources": ["browser-route-module:/Users/maximshirshin/src/github.com/maxshirshin/h2o-test/app/routes/geolocation.tsx?browser", "../../../app/routes/geolocation.tsx"],
  "sourcesContent": ["export { default, meta } from \"/Users/maximshirshin/src/github.com/maxshirshin/h2o-test/app/routes/geolocation.tsx\";", "import type { LoaderFunction, MetaFunction } from \"remix\";\nimport { json, useLoaderData } from \"remix\";\n\nimport countries from \"../lib/countries.json\";\n\nexport let meta: MetaFunction = () => {\n  return {\n    title: \"Geolocation | Remix Cloudflare Demo\",\n    description: \"Demo utilizing geolocation data on Cloudflare.\",\n  };\n};\n\nexport let loader: LoaderFunction = ({ request }) => {\n  let cf = (request as any).cf as IncomingRequestCfProperties;\n\n  let country = countries.find((c) => c.cca2 === cf.country);\n\n  let formattedLocation = \"\";\n  if (cf.city) formattedLocation += cf.city + \", \";\n  if (cf.region) formattedLocation += cf.region + \", \";\n  formattedLocation += cf.country;\n\n  return json({\n    formattedLocation,\n    country,\n  });\n};\n\nexport default function Geolocation() {\n  let { formattedLocation, country } = useLoaderData();\n\n  return (\n    <main className=\"container mx-auto prose px-4 py-8\">\n      <h1>Geolocation</h1>\n\n      <p>\n        Show localized content based on information avaliable in the{\" \"}\n        <code>Request.cf</code> object.\n      </p>\n\n      <p>\n        Location: {formattedLocation} {country.flag}\n      </p>\n\n      <p>Currencies</p>\n      <ul>\n        {Object.entries(country.currencies).map(([abbr, currency]: any) => (\n          <li key={abbr} data-testid=\"currency\">\n            {abbr}: {currency.name} ({currency.symbol})\n          </li>\n        ))}\n      </ul>\n      <p>Languages</p>\n      <ul>\n        {Object.values(country.languages).map((name: any) => (\n          <li key={name} data-testid=\"language\">\n            {name}\n          </li>\n        ))}\n      </ul>\n    </main>\n  );\n}\n"],
  "mappings": ";;;;;;;AAAA;;;ACAA;AAKO,IAAI,OAAqB,MAAM;AACpC,SAAO;AAAA,IACL,OAAO;AAAA,IACP,aAAa;AAAA;AAAA;AAoBF,uBAAuB;AACpC,MAAI,EAAE,mBAAmB,YAAY;AAErC,SACE,oCAAC,QAAD;AAAA,IAAM,WAAU;AAAA,KACd,oCAAC,MAAD,MAAI,gBAEJ,oCAAC,KAAD,MAAG,gEAC4D,KAC7D,oCAAC,QAAD,MAAM,eAAiB,aAGzB,oCAAC,KAAD,MAAG,cACU,mBAAkB,KAAE,QAAQ,OAGzC,oCAAC,KAAD,MAAG,eACH,oCAAC,MAAD,MACG,OAAO,QAAQ,QAAQ,YAAY,IAAI,CAAC,CAAC,MAAM,cAC9C,oCAAC,MAAD;AAAA,IAAI,KAAK;AAAA,IAAM,eAAY;AAAA,KACxB,MAAK,MAAG,SAAS,MAAK,MAAG,SAAS,QAAO,QAIhD,oCAAC,KAAD,MAAG,cACH,oCAAC,MAAD,MACG,OAAO,OAAO,QAAQ,WAAW,IAAI,CAAC,SACrC,oCAAC,MAAD;AAAA,IAAI,KAAK;AAAA,IAAM,eAAY;AAAA,KACxB;AAAA;",
  "names": []
}
