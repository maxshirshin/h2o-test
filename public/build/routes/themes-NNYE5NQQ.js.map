{
  "version": 3,
  "sources": ["browser-route-module:/Users/maximshirshin/src/github.com/maxshirshin/h2o-test/app/routes/themes.tsx?browser", "../../../app/routes/themes.tsx"],
  "sourcesContent": ["export { default, meta } from \"/Users/maximshirshin/src/github.com/maxshirshin/h2o-test/app/routes/themes.tsx\";", "import { useRef } from \"react\";\nimport type { ActionFunction, LoaderFunction, MetaFunction } from \"remix\";\nimport { json, Form, useLoaderData, useSubmit } from \"remix\";\n\nimport { unencryptedSession } from \"../sessions.server\";\n\nlet VALID_THEMES = [\n  \"dark\",\n  \"light\",\n  \"cupcake\",\n  \"bumblebee\",\n  \"emerald\",\n  \"corporate\",\n  \"synthwave\",\n  \"retro\",\n  \"cyberpunk\",\n  \"valentine\",\n];\n\nexport let meta: MetaFunction = () => {\n  return {\n    title: \"Themes | Remix Cloudflare Demo\",\n    description: \"Demo utilizing cookies to change the theme.\",\n  };\n};\n\nexport let action: ActionFunction = async ({ request }) => {\n  let session = await unencryptedSession.getSession(\n    request.headers.get(\"Cookie\")\n  );\n\n  let formData = new URLSearchParams(await request.text());\n\n  let theme = formData.get(\"theme\") || \"dark\";\n  session.set(\"theme\", theme);\n\n  return json(null, {\n    headers: {\n      \"Set-Cookie\": await unencryptedSession.commitSession(session),\n    },\n  });\n};\n\nexport let loader: LoaderFunction = async ({ request }) => {\n  let session = await unencryptedSession.getSession(\n    request.headers.get(\"Cookie\")\n  );\n  let theme = session.get(\"theme\") || \"dark\";\n\n  return json(theme);\n};\n\nexport default function Themes() {\n  let selectedTheme = useLoaderData();\n\n  let formRef = useRef<HTMLFormElement>(null);\n  let submit = useSubmit();\n\n  let onRadioChanged = () => {\n    submit(formRef.current);\n  };\n\n  return (\n    <main className=\"container mx-auto prose px-4 py-8\">\n      <h1>Themes</h1>\n\n      <p>\n        By storing the user selected theme in a cookie we can provide a zero\n        flicker experience even on initial page load.\n      </p>\n\n      <Form ref={formRef} method=\"post\">\n        {VALID_THEMES.map((theme) => (\n          <div key={theme} className=\"form-control\">\n            <label className=\"cursor-pointer label\">\n              <span className=\"label-text\">{theme}</span>\n              <input\n                data-testid={`theme-${theme}`}\n                type=\"radio\"\n                name=\"theme\"\n                defaultChecked={selectedTheme === theme}\n                className=\"radio\"\n                value={theme}\n                onChange={onRadioChanged}\n              />\n            </label>\n          </div>\n        ))}\n        <noscript>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Save\n          </button>\n        </noscript>\n      </Form>\n    </main>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;;;ACAA;AAAA,mBAAuB;AAIvB,sBAAmC;AAEnC,IAAI,eAAe;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAGK,IAAI,OAAqB,MAAM;AACpC,SAAO;AAAA,IACL,OAAO;AAAA,IACP,aAAa;AAAA;AAAA;AA8BF,kBAAkB;AAC/B,MAAI,gBAAgB;AAEpB,MAAI,UAAU,yBAAwB;AACtC,MAAI,SAAS;AAEb,MAAI,iBAAiB,MAAM;AACzB,WAAO,QAAQ;AAAA;AAGjB,SACE,oCAAC,QAAD;AAAA,IAAM,WAAU;AAAA,KACd,oCAAC,MAAD,MAAI,WAEJ,oCAAC,KAAD,MAAG,uHAKH,oCAAC,MAAD;AAAA,IAAM,KAAK;AAAA,IAAS,QAAO;AAAA,KACxB,aAAa,IAAI,CAAC,UACjB,oCAAC,OAAD;AAAA,IAAK,KAAK;AAAA,IAAO,WAAU;AAAA,KACzB,oCAAC,SAAD;AAAA,IAAO,WAAU;AAAA,KACf,oCAAC,QAAD;AAAA,IAAM,WAAU;AAAA,KAAc,QAC9B,oCAAC,SAAD;AAAA,IACE,eAAa,SAAS;AAAA,IACtB,MAAK;AAAA,IACL,MAAK;AAAA,IACL,gBAAgB,kBAAkB;AAAA,IAClC,WAAU;AAAA,IACV,OAAO;AAAA,IACP,UAAU;AAAA,SAKlB,oCAAC,YAAD,MACE,oCAAC,UAAD;AAAA,IAAQ,MAAK;AAAA,IAAS,WAAU;AAAA,KAAkB;AAAA;",
  "names": []
}
